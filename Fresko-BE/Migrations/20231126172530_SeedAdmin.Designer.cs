// <auto-generated />
using System;
using MSSQLApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fresko_BE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231126172530_SeedAdmin")]
    partial class SeedAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllComponentsPage", b =>
                {
                    b.Property<int>("Componentsid")
                        .HasColumnType("int");

                    b.Property<int>("Pagesid")
                        .HasColumnType("int");

                    b.HasKey("Componentsid", "Pagesid");

                    b.HasIndex("Pagesid");

                    b.ToTable("AllComponentsPage");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.AllComponents", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("PageModelId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("id");

                    b.HasIndex("PageModelId");

                    b.ToTable("all_components");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "article_text"
                        },
                        new
                        {
                            id = 2,
                            name = "file_picker"
                        },
                        new
                        {
                            id = 3,
                            name = "image_picker"
                        },
                        new
                        {
                            id = 4,
                            name = "link_picker"
                        });
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.ArticleText", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("cretion_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("pageid")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id");

                    b.HasIndex("pageid");

                    b.ToTable("article_text");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.FilePicker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("absolute_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("cretion_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("pageid")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pageid");

                    b.ToTable("file_picker");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.ImagePicker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("absolute_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("cretion_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("pageid")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pageid");

                    b.ToTable("image_picker");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.LinkPicker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("cretion_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_overwrite")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("pageid")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("pageid");

                    b.ToTable("link_picker");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.Page", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creation_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("page_name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("parent_id")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.PageContent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("component_alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("component_id")
                        .HasColumnType("int");

                    b.Property<int>("page_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("page_content");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("approved")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_admin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("password_hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("password_salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            approved = true,
                            email = "admin@admin.com",
                            is_admin = true,
                            password_hash = new byte[] { 103, 59, 56, 237, 89, 44, 139, 169, 54, 162, 86, 99, 145, 7, 58, 171, 240, 208, 148, 186, 192, 229, 6, 113, 104, 10, 31, 212, 60, 229, 131, 8, 136, 8, 152, 136, 188, 53, 79, 94, 221, 157, 228, 55, 225, 25, 60, 71, 191, 228, 118, 54, 78, 194, 110, 237, 249, 71, 195, 72, 3, 40, 3, 208 },
                            password_salt = new byte[] { 195, 154, 129, 207, 19, 128, 255, 25, 252, 18, 170, 129, 191, 205, 226, 212, 252, 89, 8, 176, 212, 72, 247, 241, 240, 120, 222, 103, 239, 250, 244, 116, 238, 29, 195, 47, 160, 238, 112, 148, 153, 214, 24, 244, 53, 200, 154, 185, 110, 80, 172, 187, 143, 56, 24, 29, 109, 104, 148, 40, 87, 226, 88, 146, 138, 195, 155, 81, 48, 80, 105, 136, 76, 173, 212, 182, 154, 214, 126, 92, 113, 159, 78, 189, 119, 160, 217, 188, 197, 215, 204, 207, 111, 194, 109, 224, 255, 208, 170, 12, 19, 45, 92, 58, 21, 187, 65, 56, 59, 126, 89, 82, 154, 21, 230, 63, 135, 14, 146, 207, 44, 184, 149, 40, 223, 34, 246, 162 },
                            username = "admin"
                        });
                });

            modelBuilder.Entity("Fresko_BE.Models.PageModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PageModel");
                });

            modelBuilder.Entity("AllComponentsPage", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.AllComponents", null)
                        .WithMany()
                        .HasForeignKey("Componentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fresko_BE.Data.TableModels.Page", null)
                        .WithMany()
                        .HasForeignKey("Pagesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.AllComponents", b =>
                {
                    b.HasOne("Fresko_BE.Models.PageModel", null)
                        .WithMany("Content")
                        .HasForeignKey("PageModelId");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.ArticleText", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.Page", "page")
                        .WithMany()
                        .HasForeignKey("pageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("page");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.FilePicker", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.Page", "page")
                        .WithMany()
                        .HasForeignKey("pageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("page");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.ImagePicker", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.Page", "page")
                        .WithMany()
                        .HasForeignKey("pageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("page");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.LinkPicker", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.Page", "page")
                        .WithMany()
                        .HasForeignKey("pageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("page");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.Page", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Fresko_BE.Models.PageModel", b =>
                {
                    b.HasOne("Fresko_BE.Data.TableModels.User", "User")
                        .WithMany("pages")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fresko_BE.Data.TableModels.User", b =>
                {
                    b.Navigation("pages");
                });

            modelBuilder.Entity("Fresko_BE.Models.PageModel", b =>
                {
                    b.Navigation("Content");
                });
#pragma warning restore 612, 618
        }
    }
}
